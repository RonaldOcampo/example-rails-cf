require 'fileutils'
require 'archive/zip'
require 'logger'
require 'deployment_utils'
require 'spade/client'
require 'table_print'

require_relative 'infrastructure/config_loader'

$stdout.sync = true

def config
  @config ||= ConfigLoader.load
end

def client_config
  {'entry_point' => config.spade_entry_point,
   'username' => config.OS_USERNAME,
   'password' => config.OS_PASSWORD
  }
end

def deployments_client
  Spade::Client::Deployments.new(client_config)
end

def services_client
  Spade::Client::Services.new(client_config)
end

def current_path
  File.dirname(__FILE__)
end

def logger
  @log ||= Logger.new($stdout)
end

ARTIFACT_URL = "#{config.artifactory}/#{config.project_code}/#{config.revision_number}/"
PATH_STAGING = "#{current_path}/staging"
PATH_SPADE_SCRIPTS = "#{current_path}/../../SpadeScripts"
PACKAGE_ZIP = "package.zip"

desc 'Collects all binaries and web app directories for deployment.'
task :package_web_app do
  web_app_source = "#{get_relative_path('../../Product/bloq')}/*"
  web_app_binaries_destination = "#{current_path}/../../WebApp"
  logger.info "Packaging binaries from source #{web_app_source} to destination #{web_app_binaries_destination}"
  package_binaries web_app_source, web_app_binaries_destination
end

task :package_artifacts => [:package_web_app, :package_spade_scripts, :package_cookbooks]

desc 'Packages the cookbooks needed for deployment'
task :package_cookbooks do
  puts 'Berkshelf run is starting...'
  `bundle exec berks install --path vendor/cookbooks -q`
  FileUtils.mkdir_p PATH_SPADE_SCRIPTS
  zip_artifacts PACKAGE_ZIP, 'vendor/cookbooks'
end

desc 'Packages spade scripts for deployments'
task :package_spade_scripts do
  [PATH_STAGING, PATH_SPADE_SCRIPTS].each { |path| FileUtils.mkdir_p path }

  package_web_scripts
  package_db_scripts
  package_lb_scripts
end

desc 'Deploys multinode or all-in-one environment'
task :deploy, :deployment_type do |t, args|
  args.deployment_type == 'M' ? execute_multinode_deploy : execute_all_in_one_deploy
end

task :deploy_multinode do
  Rake::Task['deploy'].invoke('M')
end

task :deploy_all_in_one do
  Rake::Task['deploy'].invoke('A')
end

task :list do
  instance_list = []
  begin
    deployments_client.get_all(config.datacenter).each { |deployment|
      instance_list += deployment.instances.empty? ?
        [{'deployment name' => deployment.name,
          'instance name' => '',
          'ip address' => '',
          'last updated' => deployment.updated_at.to_s
         }] :
        deployment.instances.collect do |instance|
          {
            'deployment name' => deployment.name,
            'instance name' => instance.name,
            'ip address' => instance.ohai_data['ipaddress'],
            'last updated' => deployment.updated_at.to_s
          }
        end
    }
  rescue => e
    logger.info "Exception message: #{e.message}"
    logger.info "Exception backtrace: #{e.backtrace}"
    raise
  end

  puts
  tp instance_list, 'deployment name', {'instance name' => {:width => 55}}, 'ip address', 'last updated'
end

task :delete, :deployment_name do |t, args|
  logger.info "client_config: #{client_config}"

  deployment_name = args.deployment_name || config.deployment_name

  logger.info "Running #{t} with deployment name #{deployment_name}"

  begin
    deployment = deployments_client.get(deployment_name)
  rescue => e
    logger.info "Exception message: #{e.message}"
    logger.info "Exception backtrace: #{e.backtrace}"
    raise
  end

  begin
    if a_record = deployment.metadata['a_record']
      vip = services_client.find(deployment_name,'vip').collect{ |x| x['descriptor']['ipaddress'] }.first
      logger.info "Deleting a_record: #{a_record}.#{config.domain}"
      delete_a_record(config.name_server, config.domain, a_record, vip)
    end
  rescue => e
    logger.info "Exception message: #{e.message}"
    logger.info "Exception backtrace: #{e.backtrace}"
  ensure
    logger.info "Deleting deployment called: #{deployment_name}"
    begin
      deployment.delete
    rescue => e
      logger.info "Exception message: #{e.message}"
      logger.info "Exception backtrace: #{e.backtrace}"
      raise
    end
  end
end

def create_a_record name_server, domain, cname, ip_address
  dns_client(name_server).create_a_record(domain, cname, ip_address)
end

def delete_a_record name_server, domain, cname, ip_address
  dns_client(name_server).delete_a_record(domain, cname, ip_address)
end

def dns_client name_server
  DeploymentUtils::TonicDnsClient.new(:username => 'admin', :password => 'admin', :name_server => name_server)
end

def package_binaries files_pattern, destination
  FileUtils.mkdir_p destination
  FileUtils.cp_r Dir.glob(files_pattern), destination
end

def get_relative_path path
  File.realpath "#{current_path}/#{path}"
end

def generate_script template_name, template_values, script_path
  FileUtils.mkdir_p script_path

  template_file = DeploymentUtils::TemplateHelper.new template_name,
                                                      template_values,
                                                      "#{current_path}/deployment/resources"

  template_name = template_values[:server_type] + '_' + template_name if template_values.has_key?(:server_type)
  FileUtils.cp(template_file.path, File.join(script_path, template_name))

  template_file.dispose
end

def zip_artifacts zip_file, zip_destination
  Archive::Zip.archive(File.join(PATH_SPADE_SCRIPTS, zip_file), zip_destination)
end

def copy_solo_file_to_package_location script_path
  FileUtils.cp "#{current_path}/deployment/resources/solo.rb",
               File.join(script_path, 'solo.rb')
end

def package_web_scripts
  script_path = "#{PATH_STAGING}/web"

  #create solo-run.sh.erb
  generate_script 'solo_run.sh',
                  {url: ARTIFACT_URL,
                   artifact_name: config.web_artifact_name,
                   cookbook_package: PACKAGE_ZIP,
                   server_type: 'web'},
                  "#{PATH_SPADE_SCRIPTS}"

  #create node.json.erb
  generate_script 'node.json',
                  {run_list: config.web_run_list},
                  script_path

  #create solo-environment.rb.erb
  generate_script 'solo-environment.rb',
                  {environment_name: config.deployment_name,
                   project_code: config.project_code,
                   artifacts_build_number: config.revision_number},
                  script_path

  #copy solo.rb and zip artifacts
  copy_solo_file_to_package_location script_path
  zip_artifacts config.web_artifact_name, script_path
end

def package_db_scripts
  script_path = "#{PATH_STAGING}/db"

  #create solo-run.sh.erb
  generate_script 'solo_run.sh',
                  {url: ARTIFACT_URL,
                   artifact_name: config.db_artifact_name,
                   cookbook_package: PACKAGE_ZIP,
                   server_type: 'db'},
                  "#{PATH_SPADE_SCRIPTS}"

  #create node.json.erb
  generate_script 'node.json',
                  {run_list: config.db_run_list},
                  script_path

  #create solo-environment.rb.erb
  generate_script 'solo-environment.rb',
                  {environment_name: config.deployment_name,
                   project_code: config.project_code,
                   artifacts_build_number: config.revision_number},
                  script_path

  #copy solo.rb and zip artifacts
  copy_solo_file_to_package_location script_path
  zip_artifacts config.db_artifact_name, script_path
end

def package_lb_scripts
  script_path = "#{PATH_STAGING}/lb"

  #create solo-run.sh.erb
  generate_script 'solo_run.sh',
                  {url: ARTIFACT_URL,
                   artifact_name: config.lb_artifact_name,
                   cookbook_package: PACKAGE_ZIP,
                   server_type: 'lb'},
                  "#{PATH_SPADE_SCRIPTS}"

  #create node.json.erb
  generate_script 'node.json',
                  {run_list: config.lb_run_list},
                  script_path

  #create solo-environment.rb.erb
  generate_script 'solo-environment.rb',
                  {environment_name: config.deployment_name,
                   project_code: config.project_code,
                   artifacts_build_number: config.revision_number},
                  script_path

  #copy solo.rb and zip artifacts
  copy_solo_file_to_package_location script_path
  zip_artifacts config.lb_artifact_name, script_path
end

def execute_multinode_deploy
  generate_script 'request_multinode.json', {deployment_name: config.deployment_name,
                                                         datacenter: config.datacenter,
                                                         tenant: config.OS_USERNAME,
                                                         artifactory: config.artifactory,
                                                         project_code: config.project_code,
                                                         revision_number: config.revision_number,
                                                         enable_hardening: config.enable_hardening,
                                                         send_to_noc: config.send_to_noc,
                                                         domain: config.domain,
                                                         webapp_port: config.webapp_port,
                                                         key_server_common: config.key_server_common,
                                                         enable_backup_schedule: config.enable_backup_schedule,
                                                         backup_location: config.backup_location,
                                                         backup_device: config.backup_device,
                                                         cifs_data: config.cifs_data,
                                                         ssl_private_key: config.ssl_private_key},
                                                         PATH_SPADE_SCRIPTS

  request_file = File.join(PATH_SPADE_SCRIPTS, 'request_multinode.json')
  request = JSON.parse(File.read(request_file), symbolize_names: true)
  logger.info "request: #{request}"

  begin
    deployment = deployments_client.create(request)
  rescue => e
    logger.info "Exception message: #{e.message}"
    logger.info "Exception backtrace: #{e.backtrace}"
    raise
  end

  begin
    log_status(config.deployment_name, deployment)
  rescue => e
    logger.info "Exception message: #{e.message}"
    logger.info "Exception backtrace: #{e.backtrace}"
    raise
  ensure
    get_logs(deployment)
  end

  vip = services_client.find(config.deployment_name,'vip').collect{ |x| x['descriptor']['ipaddress'] }.first
  create_a_record(config.name_server, config.domain, config.deployment_name, vip)
end

def execute_all_in_one_deploy
  generate_script 'request_all_in_one.json', {deployment_name: config.deployment_name,
                                                          datacenter: config.datacenter,
                                                          tenant: config.OS_USERNAME,
                                                          artifactory: config.artifactory,
                                                          project_code: config.project_code,
                                                          revision_number: config.revision_number,
                                                          enable_hardening: config.enable_hardening,
                                                          send_to_noc: config.send_to_noc,
                                                          domain: config.domain,
                                                          webapp_port: config.webapp_port,
                                                          key_server_common: config.key_server_common,
                                                          enable_backup_schedule: config.enable_backup_schedule,
                                                          backup_location: config.backup_location,
                                                          backup_device: config.backup_device,
                                                          cifs_data: config.cifs_data,
                                                          ssl_private_key: config.ssl_private_key,
                                                          all_in_one: config.all_in_one},
                                                          PATH_SPADE_SCRIPTS

  request_file = File.join(PATH_SPADE_SCRIPTS, 'request_all_in_one.json')
  request = JSON.parse(File.read(request_file), symbolize_names: true)
  logger.info "request: #{request}"

  begin
    deployment = deployments_client.create(request)
  rescue => e
    logger.info "Exception message: #{e.message}"
    logger.info "Exception backtrace: #{e.backtrace}"
    raise
  end

  begin
    log_status(config.deployment_name, deployment)
  rescue => e
    logger.info "Exception message: #{e.message}"
    logger.info "Exception backtrace: #{e.backtrace}"
    raise
  ensure
    get_logs(deployment)
  end
end

def log_status(deployment_name, deployment)
  logger.info "Created deployment called: #{deployment_name}"

  until deployment.provisioning_complete? do
    status = deployment.provisioning_status
    logger.info "Provisioning status is: #{status}"
    raise "Deployment Failed" if status == 'FAILED'
    sleep 10
  end
  logger.info "Provisioning completed"

  logger.info "Appliance configuration starting"
  _wait_for(deployment, :appliance_configuration_complete?, :appliance_config_status, :appliance_configuration_steps)
  logger.info "Appliance configuration completed"

  unless deployment.appliance_config_failed?
    logger.info "Application configuration starting"
    _wait_for(deployment, :application_configuration_complete?, :application_config_status, :application_configuration_steps)
    logger.info "Application configuration completed"
  end

  logger.info "Deployment #{deployment_name} finished."
end

def _wait_for(deployment, complete_method, status_method, step_method)
  until deployment.send(complete_method) do
    steps = deployment.send(step_method).select { |step| step['status'] == 'IN_PROGRESS' }
    if steps
      status = deployment.send(status_method)
      steps.each { |step| logger.info "Step #{step['name']} is #{status}, running command '#{step['command']}' on role '#{step['role']}.'" }
    else
      logger.info "No step currently in progress."
    end
    if deployment.send(status_method) == 'FAILED'
      logger.info "Deployment failed."
      raise "Deployment failed."
    end
    sleep 10
  end
end

def get_logs(deployment)
  deployment.instances.each { |instance|
    logger.info "*** Logs for instance: #{instance.name} ***"
    instance.logs.each { |spadeLog|
      if spadeLog.type != 'cloud-init'
        logger.info "*** Step name: #{spadeLog.step_name} ***"
        logger.info "*** Command: #{spadeLog.command_string} ***"
        logger.info "*** URI: #{spadeLog.uri} ***"
        logger.info spadeLog.read
      end
    }
  }
end